---
export interface RatingFormProps {
  resourceId: string;
  userRating?: number;
  userComment?: string;
}

const { resourceId, userRating = 0, userComment = '' } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mt-8">
  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Rate this Resource</h3>
  
  <form id="rating-form" class="space-y-4">
    <input type="hidden" name="resourceId" value={resourceId} />
    
    <div>
      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Your Rating
      </label>
      <div class="flex items-center" id="rating-stars">
        <div class="flex">
          {[1, 2, 3, 4, 5].map(star => (
            <button 
              type="button"
              class={`w-8 h-8 ${star <= userRating ? 'text-yellow-400' : 'text-gray-300'} focus:outline-none`}
              data-rating={star}
            >
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
              </svg>
            </button>
          ))}
        </div>
        <input type="hidden" name="rating" id="rating-input" value={userRating} />
      </div>
    </div>
    
    <div>
      <label for="comment" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Your Review (Optional)
      </label>
      <textarea 
        id="comment" 
        name="comment" 
        rows="3" 
        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      >{userComment}</textarea>
    </div>
    
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Your Email *
      </label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        required 
        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      />
      <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
        Your email won't be displayed publicly
      </p>
    </div>
    
    <div>
      <button 
        type="submit" 
        class="px-4 py-2 bg-indigo-600 text-white font-medium rounded-md hover:bg-indigo-700 transition-colors"
      >
        Submit Rating
      </button>
    </div>
  </form>
</div>

<script>
  // Handle star rating selection
  const ratingStars = document.querySelectorAll('#rating-stars button');
  const ratingInput = document.getElementById('rating-input');
  
  ratingStars.forEach(star => {
    star.addEventListener('click', () => {
      const rating = parseInt(star.getAttribute('data-rating'));
      ratingInput.value = rating;
      
      // Update star colors
      ratingStars.forEach(s => {
        const starRating = parseInt(s.getAttribute('data-rating'));
        if (starRating <= rating) {
          s.classList.remove('text-gray-300');
          s.classList.add('text-yellow-400');
        } else {
          s.classList.remove('text-yellow-400');
          s.classList.add('text-gray-300');
        }
      });
    });
  });
  
  // Handle form submission
  const ratingForm = document.getElementById('rating-form');
  ratingForm?.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const ratingData = Object.fromEntries(formData.entries());
    
    // Validate rating
    if (!ratingData.rating || parseInt(ratingData.rating) < 1) {
      alert('Please select a rating');
      return;
    }
    
    try {
      const response = await fetch('/api/submit-rating', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(ratingData),
      });
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      // Clear the form and show success message
      alert('Thank you for your rating!');
      window.location.reload();
    } catch (error) {
      console.error('Error submitting rating:', error);
      alert('There was an error submitting your rating. Please try again.');
    }
  });
</script>

