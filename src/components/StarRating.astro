---
export interface StarRatingProps {
  rating: number;
  size?: 'sm' | 'md' | 'lg';
  interactive?: boolean;
  onRatingChange?: (rating: number) => void;
}

const { 
  rating = 0, 
  size = 'md', 
  interactive = false
} = Astro.props;

const roundedRating = Math.round(rating * 2) / 2; // Round to nearest 0.5
const fullStars = Math.floor(roundedRating);
const hasHalfStar = roundedRating % 1 !== 0;
const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

const sizeClasses = {
  sm: 'w-4 h-4',
  md: 'w-5 h-5',
  lg: 'w-6 h-6'
};

const starClass = sizeClasses[size];
---

<div class={`flex items-center ${interactive ? 'cursor-pointer' : ''}`} id="star-rating-container">
  {[...Array(fullStars)].map((_, i) => (
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24" 
      fill="currentColor" 
      class={`${starClass} text-yellow-400`}
      data-rating={i + 1}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
    </svg>
  ))}
  
  {hasHalfStar && (
    <div class="relative">
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24" 
        fill="currentColor" 
        class={`${starClass} text-gray-300`}
        data-rating={fullStars + 1}
      >
        <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
      </svg>
      <div class="absolute inset-0 overflow-hidden" style={`width: 50%`}>
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24" 
          fill="currentColor" 
          class={`${starClass} text-yellow-400`}
        >
          <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
        </svg>
      </div>
    </div>
  )}
  
  {[...Array(emptyStars)].map((_, i) => (
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 24 24" 
      fill="currentColor" 
      class={`${starClass} text-gray-300`}
      data-rating={fullStars + (hasHalfStar ? 1 : 0) + i + 1}
    >
      <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
    </svg>
  ))}
  
  {rating > 0 && (
    <span class="ml-1 text-sm font-medium text-gray-600 dark:text-gray-400">
      {rating.toFixed(1)}
    </span>
  )}
</div>

{interactive && (
  <script define:vars={{ interactive }}>
    if (interactive) {
      const container = document.getElementById('star-rating-container');
      const stars = container.querySelectorAll('svg');
      
      // Highlight stars on hover
      stars.forEach(star => {
        star.addEventListener('mouseenter', () => {
          const rating = parseInt(star.getAttribute('data-rating'));
          highlightStars(rating);
        });
      });
      
      // Reset stars when mouse leaves container
      container.addEventListener('mouseleave', () => {
        const currentRating = parseInt(container.getAttribute('data-current-rating') || '0');
        highlightStars(currentRating);
      });
      
      // Set rating on click
      stars.forEach(star => {
        star.addEventListener('click', () => {
          const rating = parseInt(star.getAttribute('data-rating'));
          container.setAttribute('data-current-rating', rating.toString());
          highlightStars(rating);
          
          // Dispatch custom event
          const event = new CustomEvent('rating-changed', { detail: { rating } });
          container.dispatchEvent(event);
        });
      });
      
      function highlightStars(rating) {
        stars.forEach(star => {
          const starRating = parseInt(star.getAttribute('data-rating'));
          if (starRating <= rating) {
            star.classList.remove('text-gray-300');
            star.classList.add('text-yellow-400');
          } else {
            star.classList.remove('text-yellow-400');
            star.classList.add('text-gray-300');
          }
        });
      }
    }
  </script>
)}

